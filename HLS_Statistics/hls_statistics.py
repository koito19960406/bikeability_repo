import colorsys
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import os
import tqdm
import pandas as pd
import glob

def create_hls_array(image):
    """
    Creates a numpy array holding the hue, lightness
    and saturation values for the Pillow image.
    """

    pixels = image.load()

    hls_array = np.empty(shape=(image.height, image.width, 3), dtype=float)

    for row in range(0, image.height):

        for column in range(0, image.width):

            rgb = pixels[column, row]

            hls = colorsys.rgb_to_hls(rgb[0]/255, rgb[1]/255, rgb[2]/255)

            hls_array[row, column, 0] = hls[0]
            hls_array[row, column, 1] = hls[1]
            hls_array[row, column, 2] = hls[2]

    return hls_array


def image_from_hls_array(hls_array):
    """
    Creates a Pillow image from the HSL array
    generated by the create_hls_array function.
    """

    new_image = Image.new("RGB", (hls_array.shape[1], hls_array.shape[0]))

    for row in range(0, new_image.height):

        for column in range(0, new_image.width):

            rgb = colorsys.hls_to_rgb(hls_array[row, column, 0],
                                      hls_array[row, column, 1],
                                      hls_array[row, column, 2])

            rgb = (int(rgb[0]*255), int(rgb[1]*255), int(rgb[2]*255))

            new_image.putpixel((column, row), rgb)

    return new_image

def hls_statistics_image(input_img_folder,output_csv_folder):
    """
    This function is used to calculate mean and standard deviation of HLS of images
    Input:
        input_img_folder: a folder that contains the input images
        output_csv_folder: a folder to save the output csv file in
    """
    
    # create output folders
    if not os.path.exists(output_csv_folder):
        os.makedirs(output_csv_folder)
        
    # create the final dataframe 
    result_df=pd.DataFrame(columns=['pano_id','h_mean','h_std','l_mean','l_std','s_mean','s_std'])

    # a list of input images
    img_list=glob.glob(os.path.join(input_img_folder,'*.jpg'))
    
    for img_file in tqdm.tqdm(img_list):
        # Read image
        image = Image.open(img_file)
        hls_array = create_hls_array(image)

        # save it to result_df
        h_mean=hls_array[0].mean()
        h_std=np.std(hls_array[0])
        l_mean=hls_array[1].mean()
        l_std=np.std(hls_array[1])
        s_mean=hls_array[2].mean()
        s_std=np.std(hls_array[2])
        df_length = len(result_df)
        result_df.loc[df_length]=[os.path.split(img_file)[1].replace('.jpg',''),h_mean,h_std,l_mean,l_std,s_mean,s_std]
    result_df.to_csv(os.path.join(output_csv_folder,'hls_statistics.csv'))